%{
/****************************************************************************
myparser.y
ParserWizard generated YACC file.

Date: 2016年5月27日
****************************************************************************/
#include "mylexer.h"
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
typedef enum {program,
              program_head,
              routine,
              sub_routine,
              routine_head,
              label_part,
              const_part,
              const_expr_list,
              const_value,
              type_part,
              type_decl_list,
              type_definition,
              type_decl,
              array_type_decl,
              record_type_decl,
              field_decl_list,
              field_decl,
              name_list,
              simple_type_decl,
              var_part,
              var_decl_list,
              var_decl,
              routine_part,
              function_decl,
              function_head,
              procedure_decl,
              procedure_head,
              parameters,
              para_decl_list,
              para_type_list,
              var_para_list,
              val_para_list,
              routine_body,
              stmt_list,
              stmt,
              non_label_stmt,
              assign_stmt,
              proc_stmt,
              compound_stmt,
              if_stmt,
              else_clause,
              repeat_stmt,
              while_stmt,
              for_stmt,
              direction,
              case_stmt,
              case_expr_list,
              case_expr,
              goto_stmt,
              expression_list,
              expression,
              expr,
              term,
              factor,
              args_list,
              ID,
              INTEGER, 
              REAL, 
              CHAR, 
              STRING,
              SYS_CON,
              SYS_PROC,
              SYS_FUNCT
              } NodeKind;
int myNodeId = 0;
typedef struct{
	int child[5];
	NodeKind nodeKind;
	int nodeID;
	int derivation;
	union{
		char chaValue;
		char* ID;
		int	value;
		double douValue;
	}attr;
}node;
node myNode[100000];
#define YYSTYPE node *
node* newNode(NodeKind n){
	node[myNodeId].nodeID = myNodeId;
	node[myNodeId].nodeKind = n;
	return &node[myNodeId++];
}
node* newIDNode(NodeKind n, char * ID){
	int len;
	node[myNodeId].nodeID = id;
	node[myNodeId].nodeKind = n;
	len = strlen(ID);
	node[myNodeId].attr.ID = malloc(len + 1);
	if(node[myNodeId].attr.ID){
		printf("erroer!");
	}
	else{
		strcpy(node[myNodeId].attr.ID, ID);
	}
	return &node[myNodeId++];
}
node* myNodePtr, *myNodePtr2;
char save[100];
%}

/////////////////////////////////////////////////////////////////////////////
// declarations section

// attribute type

%token DOT		// .
%token PROGRAM
%token ID		// 鍑芥暟鍚?鍙橀噺鍚?
%token SEMI		// ;
%token CONST
%token EQUAL	// =
%token INTEGER	// 123
%token REAL		// 123.123
%token CHAR		// 'c'
%token STRING	// "abc"
%token SYS_CON  // see doc
%token TYPE
%token LP		// (
%token RP		// )
%token LB		// [
%token RB		// ]
%token DOTDOT	// ..
%token SYS_TYPE // see doc
%token ARRAY
%token OF
%token RECORD
%token COMMA	// ,
%token COLON	// :
%token ASSIGN	// :=
%token BEGIN2
%token END
%token SYS_PROC // see doc
%token READ
%token IF
%token THEN
%token ELSE
%token REPEAT
%token UNTIL
%token FOR
%token DO
%token TO
%token DOWNTO
%token CASE
%token GOTO
%token GE		// >=
%token GT		// >
%token LE		// <=
%token LT		// <
%token UNEQUAL	// <>
%token PLUS		// +
%token MINUS	// -
%token MUL		// *
%token MOD
%token DIV
%token OR
%token AND
%token SYS_FUNCT// see doc
%token VAR		
%token FUNCTION
%token PROCEDURE
%token WHILE
%token NOT
// place any declarations here


%%

/////////////////////////////////////////////////////////////////////////////
// rules section

// place your YACC rules here (there must be at least one)

program : program_head  routine  DOT{
	$$ = newNode(program);
	$$->child[0] = $1->nodeID;
	$$->child[1] = $2->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1]);
};

program_head : PROGRAM  ID{
	myNodePtr = newIDNode(ID, yytext);	
	$$ = newNode(program_head);
	$$->child[0] = myNodePtr->nodeID;
	myNodePtr->derivation = 0;
	printf("%d %d %d %s", myNodePtr->nodeID, myNodePtr->nodeKind, myNodePtr->derivation, myNodePtr->attr.ID);
	$$->derivation = 0;
	printf("%d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0]);
}  SEMI;
routine : routine_head  routine_body{
	$$ = newNode(routine);
	$$->child[0] = $1->nodeID;
	$$->child[1] = $2->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1]);
};
sub_routine : routine_head  routine_body{
	$$ = newNode(sub_routine);
	$$->child[0] = $1->nodeID;
	$$->child[1] = $2->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1]);
};

routine_head : label_part  const_part  type_part  var_part  routine_part{
	$$ = newNode(routine_head);
	$$->child[0] = $1->nodeID;
	$$->child[1] = $2->nodeID;
	$$->child[2] = $3->nodeID;
	$$->child[3] = $4->nodeID;
	$$->child[4] = $5->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1], $$->child[2], $$->child[3], $$->child[4]);
};
label_part : {
	$$ = newNode(label_part);
	$$->derivation = 0;
	printf("%d %d %d", $$->nodeID, $$->nodeKind, $$->derivation);
};
const_part	: CONST  const_expr_list{
	$$ = newNode(const_part);
	$$->child[0] = $2->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0]);
}
			|{
	$$ = newNode(const_part);
	$$->derivation = 1;
	printf("%d %d %d", $$->nodeID, $$->nodeKind, $$->derivation);
};
const_expr_list : const_expr_list  ID{
	myNodePtr = newIDNode(ID, yytext); 
	$$ = newNode(const_expr_list);
	$$->child[0] = $1->nodeID;
	$$->child[1] = myNodePtr->nodeID;
	myNodePtr->derivation = 0;
	printf("%d %d %d %s", myNodePtr->nodeID, myNodePtr->nodeKind, myNodePtr->derivation, myNodePtr->attr.ID);
}  EQUAL  const_value  SEMI{
	$$->child[2] = $2->nodeID;
	$$->derivation = 0;
	printf("%d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1]);
}
			|  ID{
	myNodePtr = newIDNode(ID, yytext); 
	$$ = newNode(const_expr_list);
	$$->child[0] = myNodePtr->nodeID;
	myNodePtr->derivation = 0;
	printf("%d %d %d %s", myNodePtr->nodeID, myNodePtr->nodeKind, myNodePtr->derivation, myNodePtr->attr.ID);	
}  EQUAL  const_value  SEMI{
	$$->child[1] = $2->nodeID;
	$$->derivation = 1;
	printf("%d %d %d %d %d", $$->nodeID, $$->nodeKind, $$->derivation, $$->child[0], $$->child[1]);
};
const_value : INTEGER 
			|  REAL
			|  CHAR
			|  STRING
			|  SYS_CON;
type_part	: TYPE type_decl_list
			|;
type_decl_list : type_decl_list  type_definition
				|  type_definition;
type_definition : ID  EQUAL  type_decl  SEMI;
array_type_decl : ARRAY  LB  simple_type_decl  RB  OF  type_decl;
record_type_decl : RECORD  field_decl_list  END;
field_decl_list : field_decl_list  field_decl
				|  field_decl;
field_decl : name_list  COLON  type_decl  SEMI;
name_list	: name_list  COMMA  ID
			|  ID;
simple_type_decl: SYS_TYPE
				|  ID
				|  LP  name_list  RP  
                |  const_value  DOTDOT  const_value  
                |  MINUS  const_value  DOTDOT  const_value
                |  MINUS  const_value  DOTDOT  MINUS  const_value
                |  ID  DOTDOT  ID;
type_decl	: simple_type_decl
			|  array_type_decl
			|  record_type_decl;
var_part	: VAR  var_decl_list
			|;
var_decl_list	:  var_decl_list  var_decl
				|  var_decl;
var_decl :  name_list  COLON  type_decl  SEMI;

routine_part:  routine_part  function_decl
			|  routine_part  procedure_decl
        	|;
function_decl : function_head  SEMI  sub_routine  SEMI;
function_head :  FUNCTION  ID  parameters  COLON  simple_type_decl;
procedure_decl :  procedure_head  SEMI  sub_routine  SEMI;
procedure_head :  PROCEDURE ID parameters ;
parameters	: LP  para_decl_list  RP
			|;
para_decl_list  :  para_decl_list SEMI para_type_list
				|  para_type_list;
para_type_list	:  var_para_list COLON  simple_type_decl 
				|  val_para_list  COLON  simple_type_decl;
var_para_list : VAR  name_list;
val_para_list : name_list;

routine_body : compound_stmt;
compound_stmt : BEGIN2  stmt_list  END;
stmt_list	: stmt_list  stmt  SEMI
			|;
stmt	: INTEGER  COLON  non_label_stmt  
		|  non_label_stmt;
non_label_stmt	: assign_stmt
				| proc_stmt
				| compound_stmt
				| if_stmt
				| repeat_stmt
				| while_stmt
				| for_stmt
				| case_stmt
				| goto_stmt;
assign_stmt : ID  ASSIGN  expression
           | ID LB expression RB ASSIGN expression
           | ID  DOT  ID  ASSIGN  expression;
proc_stmt : ID
          |  ID  LP  args_list  RP
          |  SYS_PROC
          |  SYS_PROC  LP  expression_list  RP
          |  READ  LP  factor  RP;
if_stmt : IF  expression  THEN  stmt  else_clause;
else_clause : ELSE stmt
			|;
repeat_stmt : REPEAT  stmt_list  UNTIL  expression;
while_stmt : WHILE  expression  DO stmt;
for_stmt : FOR  ID  ASSIGN  expression  direction  expression  DO stmt;
direction	: TO
			| DOWNTO;
case_stmt : CASE expression OF case_expr_list  END;
case_expr_list	: case_expr_list  case_expr
				|  case_expr;
case_expr : const_value  COLON  stmt  SEMI
          |  ID  COLON  stmt  SEMI;
goto_stmt : GOTO  INTEGER;
expression_list : expression_list  COMMA  expression
				| expression;
expression	:  expression  GE  expr
			|  expression  GT  expr
			|  expression  LE  expr
        	|  expression  LT  expr
        	|  expression  EQUAL  expr
			|  expression  UNEQUAL  expr
			|  expr;
expr	:  expr  PLUS  term
		|  expr  MINUS  term
		|  expr  OR  term
		|  term;
term	:  term  MUL  factor
		|  term  DIV  factor
		|  term  MOD  factor
		|  term  AND  factor
		|  factor;
factor	:  ID
		|  ID  LP  args_list  RP
		|  SYS_FUNCT  LP  args_list  RP
		|  const_value
		|  LP  expression  RP
		|  NOT  factor
		|  MINUS  factor
		|  ID  LB  expression  RB
		|  ID  DOT  ID;
args_list	: args_list  COMMA  expression
			|  expression;
%%

/////////////////////////////////////////////////////////////////////////////
// programs section
int main()
{
	if(freopen("test", "w", stdout) == NULL)
        fprintf(stderr,"error redirecting stdout\n");
	return yyparse();
}

void yyerror(char *s)
{
	
	fprintf(stderr, "%s\n", s);
}


